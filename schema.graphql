type QueryResultFinalized @entity(immutable: true) {
  id: Bytes!
  subgraphBridgeID: Bytes! # bytes32
  requestCID: Bytes! # bytes32
  response: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubgraphBridgeCreation @entity(immutable: true) {
  id: Bytes!
  bridgeCreator: Bytes! # address
  subgraphBridgeId: Bytes! # bytes32
  subgraphDeploymentID: Bytes! # bytes32
  queryFirstChunk: String! # bytes
  queryLastChunk: String! # bytes
  responseDataType: BigInt! # uint256
  proposalFreezePeriod: BigInt! # uint208
  responseDataOffset: Int! # uint16
  minimumSlashableGRT: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubgraphQueryDisputeCreated @entity(immutable: true) {
  id: Bytes!
  subgraphBridgeID: Bytes! # bytes32
  requestCID: Bytes! # bytes32
  disputeID: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubgraphResponseAdded @entity(immutable: true) {
  id: Bytes!
  queryBridger: Bytes! # address
  subgraphBridgeID: Bytes! # bytes32
  subgraphDeploymentID: Bytes! # bytes32
  response: String! # string
  unlocksAt: BigInt! # timestamp of when the response can be certified
  attestationData: Bytes! # bytes
  requestCID: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QueryBridger @entity {
  id: String! # always 0
  users: [Bytes!]! # address[]
  merkleRoot: Bytes # bytes32
}
